{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;\red10\green0\blue109;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;\cssrgb\c4314\c0\c50196;
\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl320\sa140\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpa}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.
\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
\pard\pardeftab720\sl320\sa140\partightenfactor0
\cf2 The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\
\pard\pardeftab720\sl320\sa140\partightenfactor0

\b \cf2 Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\

\b Java
\b0  is a general-purpose {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Programming_language"}}{\fldrslt \cf4 \strokec4 computer programming language}} that is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Concurrent_computing"}}{\fldrslt \cf4 \strokec4 concurrent}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Class-based_programming"}}{\fldrslt \cf4 \strokec4 class-based}}, {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Object-oriented_programming"}}{\fldrslt \cf4 \strokec4 object-oriented}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-FOOTNOTEGoslingJoySteeleBracha20141-14"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [14]}} and specifically designed to have as few implementation dependencies as possible. It is intended to let application developers "{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Write_once,_run_anywhere"}}{\fldrslt \cf4 \strokec4 write once, run anywhere}}" (WORA),{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-15"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [15]}} meaning that {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compiled}} Java code can run on all platforms that support Java without the need for recompilation.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-design_goals-16"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [16]}} Java applications are typically compiled to {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_bytecode"}}{\fldrslt \cf4 \strokec4 bytecode}} that can run on any {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_virtual_machine"}}{\fldrslt \cf4 \strokec4 Java virtual machine}} (JVM) regardless of {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Computer_architecture"}}{\fldrslt \cf4 \strokec4 computer architecture}}. As of 2016, Java is one of the most {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Measuring_programming_language_popularity"}}{\fldrslt \cf4 \strokec4 popular programming languages in use}},{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-17"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [17]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-18"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [18]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-languagepopularity2013-19"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [19]}}{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-20"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [20]}} particularly for client-server web applications, with a reported 9 million developers.{\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(programming_language)#cite_note-21"}}{\fldrslt 
\fs22\fsmilli11200 \cf4 \super \strokec4 [21]}} Java was originally developed by {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/James_Gosling"}}{\fldrslt \cf4 \strokec4 James Gosling}} at {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_Microsystems"}}{\fldrslt \cf4 \strokec4 Sun Microsystems}} (which has since been {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Sun_acquisition_by_Oracle"}}{\fldrslt \cf4 \strokec4 acquired by Oracle Corporation}}) and released in 1995 as a core component of Sun Microsystems' {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_(software_platform)"}}{\fldrslt \cf4 \strokec4 Java platform}}. The language derives much of its {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Syntax_(programming_languages)"}}{\fldrslt \cf4 \strokec4 syntax}} from {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C_(programming_language)"}}{\fldrslt \cf4 \strokec4 C}} and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/C%2B%2B"}}{\fldrslt \cf4 \strokec4 C++}}, but it has fewer {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Low-level_programming_language"}}{\fldrslt \cf4 \strokec4 low-level}} facilities than either of them.\
The original and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Reference_implementation"}}{\fldrslt \cf4 \strokec4 reference implementation}} Java {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Compiler"}}{\fldrslt \cf4 \strokec4 compilers}}, virtual machines, and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Library_(computing)"}}{\fldrslt \cf4 \strokec4 class libraries}} were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_Community_Process"}}{\fldrslt \cf4 \strokec4 Java Community Process}}, Sun {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Software_relicensing"}}{\fldrslt \cf4 \strokec4 relicensed}} most of its Java technologies under the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_General_Public_License"}}{\fldrslt \cf4 \strokec4 GNU General Public License}}. Others have also developed alternative implementations of these Sun technologies, such as the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Compiler_for_Java"}}{\fldrslt \cf4 \strokec4 GNU Compiler for Java}} (bytecode compiler), {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/GNU_Classpath"}}{\fldrslt \cf4 \strokec4 GNU Classpath}} (standard libraries), and {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/IcedTea"}}{\fldrslt \cf4 \strokec4 IcedTea}}-Web (browser plugin for applets).\
The latest version is {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Java_version_history"}}{\fldrslt \cf4 \strokec4 Java 8}} Update 121 which is the only version currently supported for free by Oracle, although earlier versions are supported both by Oracle and other companies on a commercial basis.\
\pard\pardeftab720\sl280\partightenfactor0

\f1\fs24 \cf5 \cb1 \strokec5 I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million I C. EMIABATA t\'92s a familiar story. Children around the world have been tested, and the United States is in trouble. A US Department of Education report1 from March concludes that \'93without substantial and sustained changes to the educational system, the United States will relinquish its leadership in the twentyfirst century\'94. The panic plays out in countless newspaper articles and policy reports, recently leading to legislative responses such as the America COMPETES Act, which contains a list of measures to boost average mathematics and science test scores. A country\'92s place in the new global economy is, according to these reports, determined by its rank in the maths- and science-score hierarchy. Following this reasoning, one would conclude that the US economy is threatened not only by Japan and South Korea, but also by Finland, Singapore, New Zealand and the Czech Republic. The rankings that engender these fears are primarily based on two tests administered to middle- and high-school students since 1995: the Programme for International Student Assessment (PISA) and the Trends in International Mathematics and Science Study (TIMSS). Improving education should be a priority for the nation, but erroneous interpretations of international test scores may drive economic and competitiveness policy in the wrong direction. When we consider that education testing shows formidable US strength as the largest producer of top-scoring students alongside a significant problem at the bottom, the threat to future competitiveness seems to be something quite different from the headlines2 . Caution is needed so we neither create policies that overstock the science and technology workforce nor unthinkingly implement the education and social practices in other high-scoring countries. A full grasp of the meaning of testscore differences should lead the next president to address education and competitiveness problems more effectively than the recent America COMPETES legislation, which is now languishing for a lack of funding. Focusing the great consternation about education on real rather than imagined problems requires a careful assessment of the evidence. Lagging behind? It is misleading to gauge the relative position of the United States in the world based on a simplistic ranking of its students\'92 test scores. This is much like measuring shoe size to predict runners\'92 future race times while ignoring their past performance. There are substantial methodological limitations in using these tests to compare nations, including reporting \'91rankings\'92 that are based on minute differences that are not statistically significant3 . For example, when considering statistically significant differences, national test scores can be clustered into three meaningful levels and the United States consistently ranks in a middle group on maths and science while being top ranked in civics4 \'97 the study of citizenship and government. Overall, about one-fifth of other nations rank better and twofifths rank underneath the United States. Still, average performance tells us nothing about the distribution of students with the very best test scores. In maths and science, when looking at average scores, the United States is outranked by countries such as Finland and South Korea. But the rankings change when we examine the percentage of students who perform at the top, those most likely to be tomorrow\'92s innovators. The South Korean average places it in the top-ranked group of nations, yet its relative proportion of top performing students is 30% lower than that of the United States. In fact, the United States has a higher percentage of top-performing students than 5 of the 14 others in the top-ranked group of countries with high average scores. Moreover, it would seem inappropriate to consider the United States, a country with a population of more than 300 million, in competition with Singapore, a country of 4.5 million, or with even smaller New Zealand. The economies in these countries range from a gross domestic product (GDP) of $124 billion in New Zealand to $236 billion in Finland, compared with the $14-trillion GDP of the United States. Perhaps a more apt comparison would be Massachusetts with a population of 6.4 million and a gross state product of $338 billion, or Colorado with 4.8 million residents and a $230- billion state product. Although the top group also includes economic powerhouses South Korea and Japan, which come in at under a fourteenth and less than a third, respectively, of the size of the US economy, for the most part it makes more sense to compare US state economies with other countries because it is Massachusetts or California that is \'91competing\'92, for example, with Singapore in developing their biotech industries. If, as we argue, average test scores are mostly irrelevant as a measure of economic potential, other indicators do matter. To produce leadingedge technology, one could argue that it is the numbers of high-performing students that is most important in the global economy. These are students who can enter the science and engineering workforce or are likely to innovate whatever their field of study. Remarkable, but little noted, is the fact that the United States produces the lion\'92s share of the world\'92s best students (see graph opposite). At the same time, low-performing students can hamper productivity and here, unfortunately, the United States also stands out. The United States produces more than one million 
\f0\fs28 \cf2 \cb3 \strokec2 \
}